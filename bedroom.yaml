substitutions:
  devicename: bedroom
  devicename_upper: Bedroom

<<: !include ./.base.yaml


## LED
light:
- platform: neopixelbus
  type: GRB
  variant: WS2812
  pin: D3
  num_leds: 179
  name: "${devicename_upper} LED Strip"
  id: "${devicename}_strip"
  effects:
  - pulse:
  - addressable_rainbow:
  - addressable_color_wipe:
      reverse: true
  - addressable_scan:

## I2C
i2c:
  scl: D1
  sda: D2
  scan: false

bme680_bsec:
  address: 0x77
  # temperature_offset: 4
  sample_rate: lp

sensor:
## BME680
- platform: bme680_bsec
  temperature:
    name: "${devicename_upper} Temperature"
    id: bme680_temp
    accuracy_decimals: 1
  pressure:
    name: "${devicename_upper} Pressure"
    accuracy_decimals: 2
  humidity:
    name: "${devicename_upper} Humidity"
    accuracy_decimals: 1
  co2_equivalent:
    name: "${devicename_upper} COÂ²"

## Rotary Encoder
- platform: rotary_encoder
  pin_a: D6 # brown
  pin_b: D7 # red
  id: knob
  restore_mode: ALWAYS_ZERO
  min_value: 0
  max_value: 255
  resolution: 4
  on_value:
    then:
    - light.turn_on:
        id: ${devicename}_strip
        brightness: !lambda "return x / 255.0;"

## Rotary Push Button
binary_sensor:
- platform: gpio
  pin:
    number: D5
    inverted: true
  id: button
  filters:
  - delayed_on: 10ms
  - delayed_off: 10ms
  on_click:
    ## Short press
  - then:
    - light.turn_on: ${devicename}_strip
    ## Long press
  - min_length: 1000ms
    max_length: 3000ms
    then:
    - light.turn_off: ${devicename}_strip
  on_double_click:
    then:
    - script.execute: next_effect

## Globals
globals:
- id: current_effect_int
  type: int
  restore_value: no
  initial_value: '0'

## Automations
script:
- id: next_effect
  then:
  - script.execute: advance_effect
  - script.execute: show_effect

- id: advance_effect
  then:
  - lambda: |-
      if (id(current_effect_int) < 3) {
        id(current_effect_int) += 1;
      } else {
        id(current_effect_int) = 0;
      }

- id: show_effect
  then:
  - lambda: |-
      auto call = id(${devicename}_strip).turn_on();

      switch(id(current_effect_int)) {
        default:
          call.set_effect("Rainbow");
          break;
        case 1:
          call.set_effect("Color Wipe");
          break;
        case 2:
          call.set_effect("Scan");
          break;
        case 3:
          call.set_effect("Pulse");
          break;
      }

      call.perform();