substitutions:
  devicename: bedroom
  devicename_upper: Bedroom

<<: !include ./.base.yaml


## LED
light:
- platform: neopixelbus
  type: GRB
  variant: WS2812
  pin: D3
  num_leds: 179
  name: "${devicename_upper} TV LED Strip"
  id: strip
  effects:
  - pulse:
      update_interval: 2s
      transition_length: 1s
      min_brightness: 15%
      max_brightness: 60%
  - addressable_rainbow:
      width: 179
  - addressable_color_wipe:
      name: Cyberpunk
      add_led_interval: 200ms
      colors:
      - red: 80%
        blue: 100%
        green: 0%
        white: 0%
        num_leds: 90
      - red: 0%
        blue: 100%
        green: 80%
        white: 0%
        num_leds: 90
  - addressable_color_wipe:
      name: Police
      add_led_interval: 50ms
      colors:
      - red: 100%
        blue: 0%
        green: 0%
        white: 0%
        num_leds: 90
      - red: 0%
        blue: 100%
        green: 0%
        white: 0%
        num_leds: 90
  - addressable_scan:
      scan_width: 20
      move_interval: 20ms
  - addressable_twinkle:
  - addressable_fireworks:
  - addressable_flicker:
      name: Flicker

sensor:
## DHT22
- platform: dht
  pin: D4
  model: AM2302
  temperature:
    name: ${devicename_upper} Temperature
  humidity:
    name: ${devicename_upper} Humidity
    accuracy_decimals: 1

## Rotary Encoder
- platform: rotary_encoder
  pin_a: D7 # red
  pin_b: D6 # brown
  id: knob
  name: ${devicename_upper} Rotary Encoder
  restore_mode: ALWAYS_ZERO
  min_value: 0
  max_value: 31
  on_value:
    then:
    - light.turn_on:
        id: strip
        transition_length: 50ms
        brightness: !lambda "return x / 31;"

## Rotary Push Button
binary_sensor:
- platform: gpio
  pin:
    number: D5
    inverted: true
  id: button
  filters:
  - delayed_on: 10ms
  - delayed_off: 10ms
  on_click:
    ## Short press
  - min_length: 50ms
    max_length: 350ms
    then:
    - light.toggle: strip
    ## Long press
  - min_length: 500ms
    max_length: 1000ms
    then:
    - light.turn_off: strip
    ## Double click
  # on_double_click:
  #   then:
  #   - script.execute: next_effect

# ## Globals
# globals:
# - id: current_effect_int
#   type: int
#   restore_value: no
#   initial_value: '0'

# ## Automations
# script:
# - id: next_effect
#   then:
#   - script.execute: advance_effect
#   - script.execute: show_effect

# - id: advance_effect
#   then:
#   - lambda: |-
#       if (id(current_effect_int) < 3) {
#         id(current_effect_int) += 1;
#       } else {
#         id(current_effect_int) = 0;
#       }

# - id: show_effect
#   then:
#   - lambda: |-
#       auto call = id(strip).turn_on();

#       switch(id(current_effect_int)) {
#         default:
#           call.set_effect("Rainbow");
#           break;
#         case 1:
#           call.set_effect("Color Wipe");
#           break;
#         case 2:
#           call.set_effect("Scan");
#           break;
#         case 3:
#           call.set_effect("Pulse");
#           break;
#       }

#       call.perform();