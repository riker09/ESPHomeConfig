substitutions:
  devicename: rack
  devicename_upper: Rack
  $friendly_name: Rack

<<: !include ./.base.yaml


## RECEIVE kp,ki and kd parameters from input_text.kx helpers in
# Home Assistant. See the PID controller below
# These helper values will get saved to flash thus permanently over-riding
# the initial values set in the PID below.
number:
# KP
- platform: template
  name: $friendly_name kp
  icon: mdi:chart-bell-curve
  restore_value: true
  min_value: 0
  max_value: 50
  step: 0.001
  set_action:
    lambda: |-
      // ESP_LOGI("main", "!!!!!! kp from boot %d", id("rack_fan_kp") );
      // id(rack_thermostat).set_kp( id("$friendly_name kp") );
      id(rack_thermostat).set_kp( x );
# KI
- platform: template
  name: $friendly_name ki
  icon: mdi:chart-bell-curve
  restore_value: true
  min_value: 0
  max_value: 50
  step: 0.0001
  set_action:
    lambda: id(rack_thermostat).set_ki( x );

# KD
- platform: template
  name: $friendly_name kd
  icon: mdi:chart-bell-curve
  restore_value: true
  min_value: -50
  max_value: 50
  step: 0.001
  set_action:
    lambda: id(rack_thermostat).set_kd( x );


## Fan Output (PWM)
output:
- platform: esp8266_pwm
  pin: D3
  frequency: 25000Hz
  id: fan_output

# ## Fan
fan:
- platform: speed
  output: fan_output
  name: "${devicename_upper} Fan Speed"
  id: "${devicename}_fan"
  speed_count: 100

## LED
light:
- platform: neopixelbus
  type: GRB
  variant: WS2812
  pin: GPIO3
  num_leds: 1
  name: "${devicename_upper} Light"
  id: "${devicename}_led"
  effects:
  - pulse:
      name: Pulse
      transition_length: 0.5s
      update_interval: 0.5s

## I2C
i2c:
  sda: 4
  scl: 5
  scan: false

bme680_bsec:
  address: 0x77
  temperature_offset: 4
  sample_rate: lp

sensor:
## BME680
- platform: bme680_bsec
  temperature:
    name: "${devicename_upper} Temperature"
    id: bme680_temp
    accuracy_decimals: 1
    # If you don't smooth the output readings
    # the PID controller over reacts to small changes.
    filters:
      # - sliding_window_moving_average:
      #     window_size: 6
      #     send_every: 1
      #     send_first_at: 1
      - exponential_moving_average:
          alpha: 0.1
          send_every: 1
    on_value_range:
    - below: 26
      then:
      - script.execute: led_blue
    - above: 26
      below: 30
      then:
      - script.execute: led_green
    - above: 30
      then:
      - script.execute: led_red
  pressure:
    name: "${devicename_upper} Pressure"
    accuracy_decimals: 2
  humidity:
    name: "${devicename_upper} Humidity"
    accuracy_decimals: 1
  gas_resistance:
    name: "${devicename_upper} Gas Resistance"
    accuracy_decimals: 1
  co2_equivalent:
    name: "${devicename_upper} CO²"


## Fan speed
- platform: pulse_counter
  pin: D4
  name: "${devicename_upper} Fan RPM"
  update_interval: 6s
  unit_of_measurement: rpm
  accuracy_decimals: 0
  icon: "mdi:fan"
  filters:
  - multiply: 0.5

# Take the "COOL" value of the pid and send
# it to the frontend to graph the output voltage
- platform: pid
  name: "Fan Speed (PWM Voltage)"
  climate_id: rack_thermostat
  type: COOL

########################################################
# START THE FAN CONTROLLER SETUP

- platform: template
  name: $friendly_name p term
  id: p_term
  unit_of_measurement: "%"
  accuracy_decimals: 2

- platform: template
  name: $friendly_name i term
  id: i_term
  unit_of_measurement: "%"
  accuracy_decimals: 2

- platform: template
  name: $friendly_name d term
  id: d_term
  unit_of_measurement: "%"
  accuracy_decimals: 2

- platform: template
  name: $friendly_name output value
  unit_of_measurement: "%"
  id: o_term
  accuracy_decimals: 2

- platform: template
  name: $friendly_name error value
  id: e_term
  accuracy_decimals: 2

- platform: template
  name: $friendly_name zero
  id: zero_value
  update_interval: 60s
  lambda: |-
    return 0;
- platform: template
  name: $friendly_name zero percent
  unit_of_measurement: "%"
  id: zero_value_percent
  update_interval: 60s
  lambda: |-
    return 0;

# Expose a PID-controlled Thermostat
# Manual: https://esphome.io/components/climate/pid.html
climate:
  - platform: pid
    name: "Rack Fan Thermostat"
    id: rack_thermostat
    sensor: bme680_temp

    # It is summer right now, so 30c is a decent target.
    default_target_temperature: 28°C
    cool_output: fan_output

    on_state:
      - sensor.template.publish:
          id: p_term
          state: !lambda 'return -id(rack_thermostat).get_proportional_term() * 100.0;'
      - sensor.template.publish:
          id: i_term
          state: !lambda 'return -id(rack_thermostat).get_integral_term()* 100.0;'
      - sensor.template.publish:
          id: d_term
          state: !lambda 'return -id(rack_thermostat).get_derivative_term()* 100.0;'
      - sensor.template.publish:
          id: o_term
          state: !lambda 'return -id(rack_thermostat).get_output_value()* 100.0;'
      - sensor.template.publish:
          id: e_term
          state: !lambda 'return -id(rack_thermostat).get_error_value();'

    # dummy heater. enable this if using autotune
    # heat_output: rack_heat_speed

    # The extents of the HA Thermostat
    visual:
      min_temperature: 20 °C
      max_temperature: 40 °C

    # See the README for setting up these parameters.
    # These are over ridden by the number templates above.
    control_parameters:
      kp: 0.15
      ki: 0.004
      kd: 0.5
      max_integral: 0.0


## Automations
script:
  ## LED
  # - id: led_pulsate
  #   then:
  #   - light.turn_on:
  #       id: "${devicename}_led"
  #       red: 1
  #       blue: 1
  #       green: 0
  #       effect: pulse
  - id: led_blue
    then:
    - light.turn_on:
        id: "${devicename}_led"
        red: 0
        blue: 1
        green: 0
        brightness: .6
  - id: led_green
    then:
    - light.turn_on:
        id: "${devicename}_led"
        red: 0
        blue: 0
        green: 1
        brightness: .6
  - id: led_red
    then:
    - light.turn_on:
        id: "${devicename}_led"
        red: 1
        blue: 0
        green: 0
        brightness: .6
  - id: led_pink
    then:
    - light.turn_on:
        id: "${devicename}_led"
        red: 1
        blue: 1
        green: 0
        brightness: .6
  - id: led_yellow
    then:
    - light.turn_on:
        id: "${devicename}_led"
        red: 1
        blue: 0
        green: 1
        brightness: .6
