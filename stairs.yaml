substitutions:
  devicename: stairs
  devicename_upper: Stairs
  timeout: 30s
  step_delay: 0.2s
  num_leds: "45"

<<: !include .base.yaml
globals:
- id: gwhite
  type: double
  restore_value: no
  initial_value: '0.4'

binary_sensor:
  ## PIR
- platform: gpio
  pin: D1
  name: "${devicename_upper} Motion"
  device_class: motion
  on_press:
    then:
    - script.execute: stairs_leds

  ## Button
- platform: gpio
  pin:
    number: D5
    mode: INPUT_PULLUP
    inverted: true
  id: button
  on_press:
    if:
      condition:
      - script.is_running: stairs_leds
      then:
      - script.stop: stairs_leds
      - light.turn_off:
          id: strip
      else:
      - script.execute: stairs_leds

## LED Strip
light:
- platform: neopixelbus
  id: strip
  type: GRBW
  pin: GPIO3
  num_leds: "${num_leds}"
  name: "${devicename_upper} LED Strip"
  restore_mode: ALWAYS_OFF
  effects:
  - addressable_rainbow:
      width: 10
  - addressable_color_wipe:
      name: Police
      add_led_interval: 200ms
      colors:
      - red: 100%
        blue: 0%
        green: 0%
        white: 0%
        num_leds: 3
      - red: 0%
        blue: 100%
        green: 0%
        white: 0%
        num_leds: 3
  - addressable_scan:
  - addressable_twinkle:
  - addressable_fireworks:
  - addressable_flicker:
      name: Flicker
- platform: partition
  id: step1
  segments:
  - id: strip
    from: 0
    to: 14
- platform: partition
  id: step2
  segments:
  - id: strip
    from: 15
    to: 29
- platform: partition
  id: step3
  segments:
  - id: strip
    from: 30
    to: 44

sensor:
- platform: adc
  pin: A0
  id: brightness
  name: "${devicename_upper} Lux"
  unit_of_measurement: lx
  update_interval: 5s
  filters:
  - lambda: |-
      return (x / 10000.0) * 2000000.0;
  on_raw_value:
    ## Store current brightness value in global variable
  - globals.set:
      id: gwhite
      value: !lambda |-
        if (x < 0.1) {
          return (double) 0.1;
        } else if (x > 1) {
          return (double) 1;
        }
        return (double) (x);

script:
- id: stairs_leds
  mode: restart
  then:
    ## Turn on the lights in proper order
  - light.turn_on: &color
      id: step1
      red: 0%
      blue: 0%
      green: 0%
      white: !lambda |-
        return id(gwhite);
  - delay: ${step_delay}
  - light.turn_on:
      <<: *color
      id: step2
  - delay: ${step_delay}
  - light.turn_on:
      <<: *color
      id: step3

    ## Wait a few seconds
  - delay: 5s

    ## Start turning things off again
  - light.turn_off: step1
  - delay: ${step_delay}
  - light.turn_off: step2
  - delay: ${step_delay}
  - light.turn_off: step3
